#!/usr/bin/env node

/******************************************************************************
 * Copyright (c) HHS OnTime 2016. All rights reserved.                        *
 *                                                                            *
 * @author Tim Visee                                                          *
 * @website http://timvisee.com/                                              *
 *                                                                            *
 * Open Source != No Copyright                                                *
 *                                                                            *
 * Permission is hereby granted, free of charge, to any person obtaining a    *
 * copy of this software and associated documentation files (the "Software"), *
 * to deal in the Software without restriction, including without limitation  *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,   *
 * and/or sell copies of the Software, and to permit persons to whom the      *
 * Software is furnished to do so, subject to the following conditions:       *
 *                                                                            *
 * The above copyright notice and this permission notice shall be included    *
 * in all copies or substantial portions of the Software.                     *
 *                                                                            *
 * You should have received a copy of The MIT License (MIT) along with this   *
 * program. If not, see <http://opensource.org/licenses/MIT/>.                *
 ******************************************************************************/

var app = require('../app');
var debug = require('debug')('dworek:server');
var http = require('http');

var config = require('../config');

// Get and configure the web port
var port = normalizePort(config.web.port);
app.set('port', port);

// Set up the HTTP server
var server = http.createServer(app);

// Listen on the provided port, on all interfaces
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port number.
 *
 * @param {number|string} val Port number, or named pipe.
 *
 * @returns {number|string|boolean} Port number, or named pipe. False is returned if the port is invalid.
 */
function normalizePort(val) {
    // Parse the port as integer
    var port = parseInt(val, 10);

    // Make sure we're working with a number, not a named pipe
    if(isNaN(port))
        return val;

    // Port number
    if(port >= 0)
        return port;

    // Failed, return false
    return false;
}

/**
 * Event listener for HTTP server error event.
 *
 * @throws
 */
function onError(error) {
    // Make sure this originates from the listen call
    if(error.syscall !== 'listen')
        throw error;

    // Build a port/pipe string
    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // Handle specific listen errors with friendly messages
    switch(error.code) {
        case 'EACCES':
            // No access to listen to the given port
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;

        case 'EADDRINUSE':
            // The port is already in use
            console.error(bind + ' is already in use');
            process.exit(1);
            break;

        default:
            // Throw the error
            throw error;
    }
}

/**
 * Event listener for HTTP server listening event.
 */
function onListening() {
    // Get the address
    var address = server.address();

    // Build a port/pipe string
    var bind = typeof address === 'string'
        ? 'pipe ' + address
        : 'port ' + address.port;

    // Debug a listening message
    debug('Listening on ' + bind);
}
